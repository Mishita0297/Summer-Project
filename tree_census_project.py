# -*- coding: utf-8 -*-
"""TREE CENSUS PROJECT

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13pNooxC2m5UyfDZ3cMNzs7wcwwc-1UTN
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

types = {'FID': np.str, 'id': np.int64, 'geom': np.str, 'oid': np.float64, 'sr_no': np.float64, 'girth_cm': np.int64, 
       'height_m': np.int64, 'canopy_dia_m': np.int64, 'condition': 'category', 'other_remarks': 'category', 'ownership': 'category',
       'society_name': np.str, 'road_name': np.str, 'northing': np.float64, 'easting': np.float64, 'balanced': np.bool,
       'remarks': 'category', 'special_collar': 'category', 'ward_name': 'category', 'botanical_name': 'category', 'saar_uid': np.int64,
       'common_name': 'category', 'local_name': 'category', 'economic_i': 'category', 'phenology': 'category', 'flowering': np.str,
       'ward': 'category', 'is_rare': np.object}
df1 = pd.read_csv('/content/drive/My Drive/Summer Project/Tree Census Data/p1.csv', dtype = types)
df2 = pd.read_csv('/content/drive/My Drive/Summer Project/Tree Census Data/p2.csv', dtype = types)
df3 = pd.read_csv('/content/drive/My Drive/Summer Project/Tree Census Data/p3.csv', dtype = types)
df4 = pd.read_csv('/content/drive/My Drive/Summer Project/Tree Census Data/p4.csv', dtype = types)
df5 = pd.read_csv('/content/drive/My Drive/Summer Project/Tree Census Data/p5.csv', dtype = types)

list = [df1, df2, df3, df4, df5]
tree = pd.concat(list, axis=0, ignore_index=True, sort=False)

tree.head()

tree.shape

tree.info()

"""OBSERVATIONS : 
 - FID(s) and id(s) for all the trees are unique
 - oid, sr_no and other_remarks are completely empty 
 - special_collar also has 97.9 % null values
"""

tree[['FID', 'id', 'condition', 'ownership',
       'society_name', 'road_name', 'balanced',
       'remarks', 'special_collar', 'ward_name', 'botanical_name', 'saar_uid',
       'common_name', 'local_name', 'economic_i', 'phenology', 'flowering',
       'ward', 'is_rare']].nunique()

tree.isnull().sum()/4009623*100

tree['condition'].unique()

tree['ownership'].unique()

tree['balanced'].unique()

tree['special_collar'].unique()

tree['economic_i'].unique()

tree['phenology'].unique()

tree['remarks'].unique()

tree['is_rare'].unique()

"""## DATA CLEANING"""

tree.drop(['oid', 'sr_no', 'other_remarks'], axis=1, inplace=True)

tree.shape

len(tree[tree['ward'] != tree['ward_name']])

"""Since, the columns 'ward' and 'ward_name' are identical, we can drop one. We have dropped 'ward_name'.

Checking the 'geom', 'northing' and 'easting' columns
"""

tree['longitude'] = tree['geom'].apply(lambda x: x[x.find("(")+1 : x.find(")")].split()[0])
tree['latitude'] = tree['geom'].apply(lambda x: x[x.find("(")+1 : x.find(")")].split()[1])

"""Now, we can drop 'geom' column"""

tree.drop(['ward_name', 'geom'], axis=1, inplace=True)

tree[['longitude', 'latitude']] = tree[['longitude', 'latitude']].astype(np.float64)

import matplotlib as mpl
mpl.rc('xtick', labelsize=10)
mpl.rc('ytick', labelsize=10)

plt.scatter(x='longitude', y='easting', data=tree)
plt.xlabel('Longitude')
plt.ylabel('Easting')
plt.title('Easting vs Longitude')

plt.scatter(x='latitude', y='northing', data=tree)
plt.xlabel('Latitude')
plt.ylabel('Northing')
plt.title('Northing vs Latitude')

tree.drop(['longitude', 'latitude'], axis=1, inplace=True)

tree.head()

tree.shape

"""## CLEANING INDIVIDUAL COLUMNS AND ROWS"""

# OWNERSHIP COLUMN
tree['ownership'].replace(to_replace=['Footpath', 'Government'],
           value= ['On Foot Path', 'Govt'], 
           inplace=True)
tree['ownership'].unique()

"""CHECKING THE CATEGORIES OF special_collar COLUMN AND ENCODING THEM"""

tree['special_collar'].value_counts()

tree[tree['special_collar'] == 'On The Wall']



tree['special_collar'].replace(to_replace='On The Wall', value=np.nan, inplace=True)
tree['special_collar'].unique()

# Encode NaN = 0, implying 0 collars; collar = 1, indicating presence of collars; let '2' be 2 only.
tree['special_collar'].replace(to_replace=[np.nan, 'Collar', '2'], value=[0, 1, 2], inplace=True)
tree['special_collar'].unique()

# CHECKING THE CATEGORY '2' FOR special_collar column
tree[tree['special_collar'] == 2]

len(tree[tree['local_name'] == 'Pimpal'])

len(tree[(tree['local_name'] == 'Pimpal') & (tree['common_name'] == 'Pipal')])

"""Some of the society_names are followed by \n. Remove them."""

tree['society_name'].replace(to_replace='Na', value=np.nan, inplace=True)

tree['road_name'].replace(to_replace='Na', value=np.nan, inplace=True)

len(tree[tree['society_name'] == 'Na'])

tree['society_name'].replace(to_replace=np.nan, value='Unknown', inplace=True)

tree['road_name'].replace(to_replace=np.nan, value='Unknown', inplace=True)

tree['society_name'] = tree['society_name'].apply(lambda x: x.rstrip('\n'))

tree['road_name'] = tree['road_name'].apply(lambda x: x[: x.find("\\n")])

tree[tree['special_collar'] == 2]

tree[['society_name', 'road_name']].nunique()

"""'remarks' column"""

tree['remarks'].replace(to_replace='Mechanical Cut',
           value='Mechanically cut', 
           inplace=True)
tree['remarks'].unique()

tree['remarks'].unique()

len(set(zip(tree['botanical_name'],tree['common_name'],tree['local_name'])))

len(tree[(tree['common_name'] == 'Unidentified') | (tree['common_name'] == 'Dead')])

len(tree[(tree['local_name'] == 'Unidentified') | (tree['local_name'] == 'Dead')])

len(tree[(tree['common_name'] == 'Unidentified') | (tree['common_name'] == 'Dead') != (tree['local_name'] == 'Unidentified') | (tree['local_name'] == 'Dead')])

tree[(tree['common_name'] == 'Unidentified') | (tree['common_name'] == 'Dead')][['condition', 'ownership', 'society_name', 'road_name',
                                                                                 'balanced', 'remarks', 'economic_i', 'phenology', 
                                                                                 'is_rare']].nunique()

len(tree[tree['common_name'] != tree['local_name']])

"""4. NORTHING AND EASTING

SCATTER PLOT OF NORTHINGS AND EASINGS WHICH SHOWS A MAP OF THE PUNE CITY 
(a few areas seem to be missing though)

Number of wards in Pune is 144? Data available on 77 wards. How do these points cover almost the entire city?
"""

plt.figure(figsize=(10,10))
sns.scatterplot(x='easting', y='northing', data=tree)

plt.figure(figsize=(9,9))
sns.scatterplot( x='easting', y='northing', data = tree[(tree['local_name'] == 'Unidentified') | (tree['local_name'] == 'Dead')], 
                edgecolor='black', alpha=0.1, hue='local_name')

# Now plot the is_rare 
plt.figure(figsize=(9,9))
sns.scatterplot( x='easting', y='northing', data = tree, 
                edgecolor='black', alpha=0.1, hue=tree[(tree['condition'] != 'Healthy') & (tree['condition'] != 'Average')]['condition'])

tree.columns

len(tree[tree['economic_i'].isnull()])

tree['remarks'].unique()

# Encoding the remarks column to deal with the missing values
tree['remarks'].replace(to_replace=[np.nan, 'Mechanically cut', 'Uprooted', 'On The Wall', 'Diseased', 'Dangerous'],
                        value=[0, 1, 2, 3, 4, 5], inplace=True)
tree['remarks'].unique()

tree.isnull().sum() / 4009623 * 100

# How is tree condition related to is_rare?
sns.countplot(x='condition', data=tree, hue='is_rare' )

plt.figure(figsize=(9,9))
sns.scatterplot(x='easting', y='northing', data=tree, hue='is_rare')

len(tree[tree['botanical_name'].isnull()])

# CONDITION OF THE TREES
tree['condition'].value_counts()

# STUDY OF TREES WHOSE CONDITION IS EITHER POOR OR DEAD.
unhealthy = tree[(tree['condition'] == 'Poor') | (tree['condition'] == 'Dead')]

# CHECK WHAT PORTION OF ALL NULL VALUES CORRESPONDS TO DEAD TREES
dead = tree[tree['condition'] == 'Dead']
dead.isnull().sum() / 4009623 * 100
# WHICH SHOWS ONLY A NEGLIGIBLY SMALL PORTION OF MISSING VALUES IS BECAUSE OF THE FACT THAT THE TREE IS DEAD

# TO CHECK WHETHER CANOPY_DIA_M = 0 CORRESPONDS TO DEAD TREES ONLY
plt.figure(figsize=(10,5))
sns.violinplot(x='condition', y='canopy_dia_m', data=tree, COLOR={'Healthy':'green', 'Average':'blue', })
# SHOWS THAT : Even some of the dead trees have a canopy diameter upto a significant 80m

fig = plt.figure(figsize=(10,6))
sns.countplot(x='ownership', data=unhealthy, hue='condition')
plt.xticks(rotation=45)
plt.tight_layout()

"""# EDA AND DATA VIZUALISATION"""

sns.set_style('whitegrid')

# Convert Girth From cm to m
tree['girth_m'] = tree['girth_cm'] * 0.01

# STATISTICAL SUMMARY OF THE NUMERICAL COLUMNS
tree.describe()

"""## COLUMN-WISE DATA VISUALISATION
1. HEIGHT, GIRTH AND CANOPY DIAMETER
"""

fig = plt.figure(figsize=(14, 8))

ax = fig.add_subplot(311)
sns.violinplot(tree['girth_m'], ax=ax, kde=False)

ax = fig.add_subplot(312)
sns.violinplot(tree['height_m'], ax=ax, kde=False)

ax = fig.add_subplot(313)
sns.violinplot(tree['canopy_dia_m'], ax=ax, kde=False)

plt.tight_layout()

"""2. CONDITION COLUMN"""

tree['condition'].value_counts() / 4009623 * 100

sns.countplot(x='condition',data=tree)

"""3. OWNERSHIP"""

tree['ownership'].value_counts() / 4009623 * 100

"""5. BALANCED"""

tree['balanced'].value_counts() / 4009623 * 100

# WHAT PERCENTAGE OF THE BALANCED TREES ARE IN A POOR CONDITION OR ARE DEAD?
[tree['balanced'] == True]

sns.countplot(x='condition', data=tree[tree['balanced'] == False])

# Out of the total unbalanced trees how many are in a poor condiio or are dead
len(tree[(tree['balanced'] == False) & ((tree['condition'] == 'Poor') | (tree['condition'] == 'Dead'))])

"""6. REMARKS COLUMN 

(TREE STRESS)
"""

tree['remarks'].value_counts() / 4009623 * 100

tree['remarks'] = tree['remarks'].replace(to_replace = [np.nan, 'Mechanically Cut','Diseased', 'Uprooted', 'On The Wall', 'Dangerous'], 
                                         value = [0, 1, 2, 3, 4, 5], inplace=True)

"""BOTANICAL, COMMON AND LOCAL NAMES"""

# Top 10 species of trees found in Pune
tree['botanical_name'].value_counts().head(10)

"""ECONOMIC_I COLUMN"""

tree['economic_i'].value_counts()

fig = plt.figure(figsize=(20,10))
sns.countplot(x='economic_i', data=tree)
plt.title('Economic Value of Tree', size=14)

good = tree[(tree['condition'] == 'Healthy') & ()]

plt.figure(figsize=(10,6))
sns.countplot(x='economic_i',data=unhealthy ,hue='condition')
plt.xticks(rotation=45)

plt.figure(figsize=(10,6))
sns.countplot(x='economic_i', data=tree ,hue='condition')
plt.xticks(rotation=45)

"""PHENOLOGY"""

tree['phenology'].value_counts() /4009623*100

fig = plt.figure(figsize=(8,5))
sns.countplot(x='phenology', data=tree)
plt.title('Phenology of Tree', size=14)

sns.countplot(x='phenology', data=tree,hue='condition')

"""FLOWERING"""

tree['flowering'].nunique()

"""IS_RARE COLUMN"""

tree['is_rare'].value_counts()/4009623*100

fig = plt.figure(figsize=(8,5))
sns.countplot(x='is_rare', data=tree)
plt.title('Tree is Rare or not', size=14)



